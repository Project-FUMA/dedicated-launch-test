name: Dedicated Launch Test
description: Test if specified mods can launch on dedicated server environment
inputs:
  packwiz-server-url:
    description: Packwiz server url
    required: false
    default: "http://localhost:8080/pack.toml"
runs:
  using: composite
  steps:
    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'microsoft'
        java-version: '17'
    - name: Setup repo
      shell: bash
      run: |
        git clone https://github.com/Project-FUMA/dedicated-launch-test.git
        cd dedicated-launch-test
        git checkout 1.20.1-forge
        cd ..
        mkdir -p dedicated-launch-test/server
    - name: Apply server cache
      uses: actions/cache@v4
      with:
        path: dedicated-launch-test/server
        key: ${{ runner.os }}-packwiz-mc-server-${{ hashFiles('dedicated-launch-test/server/libraries/**') }}
        restore-keys: ${{ runner.os }}-packwiz-mc-server-
    # - name: Apply packwiz-installer cache
    #   uses: actions/cache@v4
    #   with:
    #     path: dedicated-launch-test/server/packwiz-installer.jar
    #     key: ${{ runner.os }}-packwiz-installer-${{ hashFiles('dedicated-launch-test/server/packwiz-installer.jar') }}
    #     restore-keys: ${{ runner.os }}-packwiz-installer-
    - name: Setup packwiz-installer
      shell: bash
      run: |
        wget -O dedicated-launch-test/server/packwiz-installer-bootstrap.jar https://github.com/packwiz/packwiz-installer-bootstrap/releases/download/v0.0.3/packwiz-installer-bootstrap.jar
    - name: Setup Server
      shell: bash
      env:
        WIZ_SERVER_URL: ${{ inputs.packwiz-server-url }}
      run: |
        cd dedicated-launch-test/server
        java -jar packwiz-installer-bootstrap.jar -g -s server $WIZ_SERVER_URL
        # mkdir -p config
        # echo 'disableConfigWatcher = true' > config/fml.toml
        mkdir mods || true
        echo By using this workflow, you agree with the terms set in Minecraft EULA.
        echo Get the full EULA text here: https://www.minecraft.net/en-us/eula
        echo -n "eula=true" > eula.txt
    - name: Launch
      shell: bash
      run: |
        cd dedicated-launch-test/server
        ./run.sh <<< "stop" &
        for i in $(seq 60); do
          sleep 5
          jobs > running.txt
          if [ ! -s running.txt ]; then
            exit 0
          fi
        done
        # Get current running jobs
        jobs > running.txt
        # If still have running jobs, we know we are in trouble.
        # Call jps to get pid, and use jstack to have a trace dump.
        # Then, kill server and force exit.
        if [ -s running.txt ]; then
          jps | grep BootstrapLauncher | sed -e 's/ BootstrapLauncher//g' > dslt.pid
          jstack $(cat dslt.pid)
          jmap -dump:live,format=b,file=heap.bin $(cat dslt.pid)
          kill -9 $(cat dslt.pid)
          exit -1
        fi
    - name: Check
      shell: bash
      run: |
        cd dedicated-launch-test/server
        cat crash-reports/* || true
        grep 'For help, type "help"' logs/*
    - name: Cleanup
      shell: bash
      run: |
        cd dedicated-launch-test/server
        rm -vf mods/*
        rm -rf crash-reports
        rm -rf logs
        rm -rf world
